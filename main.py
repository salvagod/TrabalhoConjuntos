#Aluno: Vitor Salvadego

# Enunciado:
# Para obter os pontos relativos a este trabalho, voc√™  dever√° criar um programa, utilizando a linguagem Python, C, ou C++.  
# Este programa, quando executado, ir√° apresentar os resultados de opera√ß√µes que ser√£o realizadas entre dois conjuntos de dados.  
# O programa que voc√™ desenvolver√° ir√° receber como entrada um arquivo de texto (.txt) contendo v√°rios conjuntos de dados e v√°rias opera√ß√µes.
# Estas opera√ß√µes e dados estar√£o representadas em um arquivo de textos contendo apenas os dados referentes as opera√ß√µes que devem ser realizadas 
# segundo a seguinte regra fixa: a primeira linha do arquivo de texto de entrada conter√° o n√∫mero de opera√ß√µes  que  est√£o  descritas  no  arquivo,
# este n√∫mero de opera√ß√µes ser√° um inteiro; as linhas seguintes seguir√£o sempre o mesmo padr√£o de tr√™s linhas: a primeira  linha apresenta o c√≥digo
# da opera√ß√£o (U para uni√£o, I para interse√ß√£o, D para diferen√ßa e C produto cartesiano), a segunda e terceira linhas conter√£o os elementos dos conjuntos
# separados por virgulas. A seguir est√° um exemplo das linhas que podem existir em um arquivo de testes para o programa que voc√™ ir√° desenvolver: 
# 4 
# U 
# 3, 5, 67, 7 
# 1, 2, 3, 4  
# I 
# 1, 2, 3, 4, 5 
# 4, 5 
# D 
# 1, A, C, 34 
# A, C, D, 23 
# C 
# 3, 4, 5, 5, A, B, R 
# 1, B, C, D, 1 
# Neste exemplo temos 4 opera√ß√µes uma uni√£o (U), uma interse√ß√£o (I), um diferen√ßa (D) e um produto cartesiano (C). A uni√£o, definida por U, dever√° 
# ser executada sobre os conjuntos {ùüë,ùüì,ùüîùüï,ùüï} e {ùüè,ùüê,ùüë,ùüí}, cujos elementos est√£o explicitados nas linhas posteriores a defini√ß√£o da opera√ß√£o (U).  
# A resposta do seu programa dever√° conter a opera√ß√£o realizada, descrita por extenso, os dados dos conjuntos identificados, e o resultado da opera√ß√£o.
#  No caso da uni√£o a linha de sa√≠da dever√° conter a informa√ß√£o e a formata√ß√£o mostrada a seguir:    
# Uni√£o: conjunto 1 {3,5,67,7}, conjunto 2 {1,2,3,4}. Resultado: {3,5,67,7,1,2,4}   
# Seu programa dever√° mostrar a sa√≠da no terminal, ou em um arquivo de textos. Em qualquer um dos casos, a sa√≠da ser√° composta por uma linha de sa√≠da para
# cada opera√ß√£o constante no arquivo de  textos de entrada  formatada segundo o exemplo de sa√≠da acima. Observe as letras  mai√∫sculas e min√∫sculas, e os 
# pontos utilizados na formata√ß√£o da linha de sa√≠da apresenta acima. No caso do texto de exemplo, teremos 4 linhas, e apenas 4 linhas de sa√≠da, formatadas e 
# pontuadas conforme o exemplo de sa√≠da acima. O uso de linhas extras na sa√≠da, ou erros de formata√ß√£o, implicam em perda de pontos como pode ser visto na 
# rubrica de avalia√ß√£o constante neste documento. Para que seu programa possa ser testado voc√™ deve criar, no m√≠nimo, tr√™s arquivos de entrada contendo um
# n√∫mero diferente de opera√ß√µes, opera√ß√µes com dados diferentes, e opera√ß√µes em ordem diferentes. Os arquivos de entrada criados para os seus testes
# devem estar dispon√≠veis tanto no ambiente repl.it quanto no ambiente Github. Observe que o professor ir√° testar seu programa com os arquivos de testes 
# que voc√™ criar e com, no m√≠nimo um arquivo de testes criado pelo pr√≥prio professor. 

# Refer√™ncia: Os conhecimentos aqui usados foram adquiridos utilizando o site:
# https://docs.python.org/3/tutorial/index.html

def RemoverNumerosRepetidos(UniaoFinal):    #fun√ß√£o para verificar e remover n√∫meros repetidos na opera√ß√£o de uni√£o
    ConjuntoUniaoFinal = []                 #vetor que ser√° populado com a uni√£o das 2 listas
    for i in UniaoFinal:
        if i not in ConjuntoUniaoFinal:     #verifica numeros repetidos
            ConjuntoUniaoFinal.append(i)    #somente popula o vetor caso o n√∫mero n√£o seja repetido
    return ConjuntoUniaoFinal

def CalcularProdutoCartesiano(elementos):   #fun√ß√£o para juntar os elementos de cada lista para formar o produto cartesiano
  produtocartesiano = [[]]                  #vetor que ser√° populado com o produto cartesiano
  for elemento in elementos: 
    produtocartesiano = [x+[y] for x in produtocartesiano for y in elemento] #loop de repeti√ß√£o para juntar os elementos de acordo com √≠ndice de cada lista
  return produtocartesiano

def Uniao(): #fun√ß√£o que realizar√° a opera√ß√£o de uni√£o
    numeros1 = f.readline()              #ler a linha de elementos para a 1¬™ lista
    numeros1 = numeros1.strip()          #retira espa√ßos desnecess√°rios
    numeros1 = numeros1.split(", ")      #separa a string em elementos separados com base na v√≠rgula e espa√ßo 
    exibicao1 = ', '.join(numeros1)      #junta os elementos separados em uma string para uma melhor exibi√ß√£o e formata√ß√£o na sa√≠da
    exibicao1 = "{" + exibicao1 + "}"    #incorpora chaves para nota√ß√£o correta de um conjunto

    numeros2 = f.readline()
    numeros2 = numeros2.strip()
    numeros2 = numeros2.split(", ")
    exibicao2 = ', '.join(numeros2)
    exibicao2 = "{" + exibicao2 + "}"

    UniaoFinal = numeros1 + numeros2                   #une as 2 listas em uma s√≥
    UniaoFinal = RemoverNumerosRepetidos(UniaoFinal)   #remove poss√≠veis n√∫meros repetidos
    UniaoFinal = ', '.join(UniaoFinal)                 #une elementos em uma s√≥ string com v√≠rgulas e espa√ßos
    UniaoFinal = "{" + UniaoFinal + "}"                #incorpora chaves para nota√ß√£o correta de um conjunto

    print('Uni√£o: conjunto 1 {}, conjunto 2 {}. Resultado: {}'.format(exibicao1, exibicao2, UniaoFinal)) #Mensagem devidamente formatada com o conjunto 1, 2 e conjunto final de uni√£o

def Intersecao(): #fun√ß√£o que realizar√° a opera√ß√£o de interse√ß√£o
    numeros1 = f.readline()
    numeros1 = numeros1.strip()
    numeros1 = numeros1.split(", ")
    exibicao1 = ', '.join(numeros1)
    exibicao1 = "{" + exibicao1 + "}"

    numeros2 = f.readline()
    numeros2 = numeros2.strip()
    numeros2 = numeros2.split(", ")
    exibicao2 = ', '.join(numeros2)
    exibicao2 = "{" + exibicao2 + "}"

    intersecao = []                       #vetor que ser√° populado com os elementos da interse√ß√£o
    for elemento in numeros1:             #la√ßo de repeti√ß√£o para verificar todos os elementos
        if elemento in numeros2:          #verifica se o elemento da 1¬™ lista est√° contido na 2¬™
            intersecao.append(elemento)   #caso esteja, o elemento popular√° o vetor
    intersecao = ', '.join(intersecao)    #une elementos em uma s√≥ string com v√≠rgulas e espa√ßos
    intersecao = "{" + intersecao + "}"   #incorpora chaves para nota√ß√£o correta de um conjunto

    print('Interse√ß√£o: conjunto 1 {}, conjunto 2 {}. Resultado: {}'.format(exibicao1, exibicao2, intersecao))  #Mensagem devidamente formatada com o conjunto 1, 2 e conjunto final de interse√ß√£o

def Diferenca(): #fun√ß√£o que realizar√° a opera√ß√£o de diferen√ßa
    numeros1 = f.readline()
    numeros1 = numeros1.strip()
    numeros1 = numeros1.split(", ")
    exibicao1 = ', '.join(numeros1)
    exibicao1 = "{" + exibicao1 + "}"

    numeros2 = f.readline()
    numeros2 = numeros2.strip()
    numeros2 = numeros2.split(", ")
    exibicao2 = ', '.join(numeros2)
    exibicao2 = "{" + exibicao2 + "}"

    diferenca = []                      #vetor que ser√° populado com os elementos diferentes
    for elemento in numeros1:           #la√ßo de repeti√ß√£o para verificar todos os elementos
        if elemento not in numeros2:    #verifica se elementos na lista 1 est√£o na lista 2
            diferenca.append(elemento)  #caso n√£o estejam, ser√£o alocados para o vetor
    for elemento in numeros2:           #la√ßo de repeti√ß√£o para verificar todos os elementos
        if elemento not in numeros1:    #verifica se elementos na lista 2 est√£o na lista 1
            diferenca.append(elemento)  #caso n√£o estejam, ser√£o alocados para o vetor
    diferenca = ', '.join(diferenca)
    diferenca = "{" + diferenca + "}"

    print('Diferen√ßa: conjunto 1 {}, conjunto 2 {}. Resultado: {}'.format(exibicao1, exibicao2, diferenca))   #Mensagem devidamente formatada com o conjunto 1, 2 e conjunto final da diferen√ßa

def ProdutoCartesiano(): #fun√ß√£o que realizar√° a opera√ß√£o do produto cartesiano
    numeros1 = f.readline()
    numeros1 = numeros1.strip()
    numeros1 = numeros1.split(", ")
    exibicao1 = ', '.join(numeros1)
    exibicao1 = "{" + exibicao1 + "}"

    numeros2 = f.readline()
    numeros2 = numeros2.strip()
    numeros2 = numeros2.split(", ")
    exibicao2 = ', '.join(numeros2)
    exibicao2 = "{" + exibicao2 + "}"

    produtos = [numeros1, numeros2]                                   #vari√°vel que conter√° as 2 listas de n√∫meros
    produtocartesiano = CalcularProdutoCartesiano(produtos)           #formar o produto cartesiano
    produtocartesiano = ', '.join(str(i) for i in produtocartesiano)  #unir elementos em uma string para melhor formata√ß√£o
    produtocartesiano = "{" + produtocartesiano + "}" 

    print('Produto Cartesiano: conjunto 1 {}, conjunto 2 {}. Resultado: {}'.format(exibicao1, exibicao2, produtocartesiano))   #Mensagem devidamente formatada com o conjunto 1, 2 e conjunto final do produto cartesiano

x = 0   #vari√°vel utilizada para o la√ßo de repeti√ß√£o do programa
f = open("problema.txt", "r")   #abrir arquivo com problemas que ser√£o lidos (Para trocar de arquivo, utilize os nomes "problema.txt", "problema2.txt", "problema3.txt" ou o de outro criado posteriormente.)
numeroOperacoes = int(f.readline())   #ler o n√∫mero de opera√ß√µes que ser√£o executadas

operacao = f.readline()           #ler a primeira opera√ß√£o do programa 
operacao = operacao.strip()
operacao = operacao.strip('\n')

while x != numeroOperacoes: #la√ßo de repeti√ß√£o conforme o numero de opera√ß√µes lido anteriormente
    if operacao == "U": #condicional para caso da opera√ß√£o do momento ser Uni√£o
        Uniao()
        operacao = f.readline() #passar para pr√≥xima opera√ß√£o
        operacao = operacao.strip()
        operacao = operacao.strip('\n')
    
    if operacao == "I": #condicional para caso da opera√ß√£o do momento ser Interse√ß√£o
        Intersecao()
        operacao = f.readline()
        operacao = operacao.strip()
        operacao = operacao.strip('\n')
    
    if operacao == "D": #condicional para caso da opera√ß√£o do momento ser Diferen√ßa
        Diferenca()
        operacao = f.readline()
        operacao = operacao.strip()
        operacao = operacao.strip('\n')
    
    if operacao == "C": #condicional para caso da opera√ß√£o do momento ser Produto Cartesiano
        ProdutoCartesiano()
        operacao = f.readline()
        operacao = operacao.strip()
        operacao = operacao.strip('\n')

    x += 1 #continuidade da repeti√ß√£o
f.close()